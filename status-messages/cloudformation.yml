AWSTemplateFormatVersion: 2010-09-09

Parameters:
  HyP3URL:
    Type: String

  QueueName:
    Type: String

  AWSAccessKeyID:
    Type: String

  AWSSecretAccessKey:
    Type: String
    NoEcho: true

  MattermostPAT:
    Type: String

Resources:
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Lambda}"

  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action: sts:AssumeRole
          Principal:
            Service: lambda.amazonaws.com
          Effect: Allow
      Policies:
        - PolicyName: policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: sqs:GetQueueAttributes
                Resource: !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${QueueName}"

  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          HYP3_URL: !Ref HyP3URL
          AWS_ACCESS_KEY_ID: !Ref AWSAccessKeyID
          AWS_SECRET_ACCESS_KEY: !Ref AWSSecretAccessKey
          MATTERMOST_PAT: !Ref MattermostPAT
      Code: src/
      Handler: status_messages.lambda_handler
      Role: !GetAtt Role.Arn
      Runtime: python3.9
      Timeout: 900

  Schedule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: "cron(13 0 ? * 2 *)"
      Targets:
        - Arn: !GetAtt Lambda.Arn
          Id: lambda

  EventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt Lambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt Schedule.Arn
