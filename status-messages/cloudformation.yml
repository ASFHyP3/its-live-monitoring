AWSTemplateFormatVersion: 2010-09-09

Parameters:
  QueueURL:
    Type: String
    NoEcho: true

  QueueName:
    Type: String

  MattermostPAT:
    Type: String
    NoEcho: true

Resources:
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Lambda}"
      RetentionInDays: 30

  Role:
    Type: Custom::JplRole
    Properties:
      ServiceToken: !ImportValue Custom::JplRole::ServiceToken
      Path: /account-managed/hyp3/
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action: sts:AssumeRole
          Principal:
            Service: lambda.amazonaws.com
          Effect: Allow
      ManagedPolicyArns:
        - !Ref: Policy

  Policy:
    Type: Custom::JplPolicy
    Properties:
      ServiceToken: !ImportValue Custom::JplPolicy::ServiceToken
      Path: /account-managed/hyp3/
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sqs:GetQueueAttributes
            Resource: !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${QueueName}"

  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          MATTERMOST_PAT: !Ref MattermostPAT
          QUEUE_URL: !Ref QueueURL
      Code: src/
      Handler: status_messages.lambda_handler
      Role: !GetAtt Role.Arn
      Runtime: python3.12
      Timeout: 10

  Schedule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: "cron(0 13 ? * 2 *)"
      Targets:
        - Arn: !GetAtt Lambda.Arn
          Id: lambda

  EventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt Lambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt Schedule.Arn
